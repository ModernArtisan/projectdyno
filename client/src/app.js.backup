const app = () => {
	const HIGHLIGHT_ELEMENT_ID = 'HIGHLIGHT_ELEMENT_ID';
	const INFOBOX_ELEMENT_ID = 'INFOBOX_ELEMENT_ID';
	const INFOBOX_HEADER_ELEMENT_ID = 'INFOBOX_HEADER_ELEMENT_ID';
	const INFOBOX_DESCRIPTION_ELEMENT_ID = 'INFOBOX_DESCRIPTION_ELEMENT_ID';
	const INFOBOX_NEXT_ELEMENT_ID = 'INFOBOX_NEXT_ELEMENT_ID';
	const INFOBOX_PREVIOUS_ELEMENT_ID = 'INFOBOX_PREVIOUS_ELEMENT_ID';
	const ANIMATION_SPEED = '0.3s';

	/**
	 * Returns an array containing the DOM elements checkmark will highlighting.
	 * @param {Array} config an array of configuration objects
	 * @returns {Array} the DOM elements checkmar will be highlighting.
	 */
	const getCheckmarkElementsFromId = (config) => config.map(
		checkmark => {
			const element = document.getElementById(checkmark.id);

			return element;
		}
	);

	/**
	 * Calculates the postion of the checkmarks info box.
	 * @param {number} left the left bound of the target element
	 * @param {number} top the top bound of the target element
	 * @param {number} width the width of the target element
	 * @param {number} height the height of the target element
	 */
	// TODO add options for positioning the info box above the target element, below, etc.
	const calculateInfoBoxPosition = (left, top, width, height) => ({
		left,
		top: top + height,
	})

	const getOrCreateElementById = (id, elementType = 'div') =>
		document.getElementById(id) || document.createElement(elementType);

	/**
	 * Creates or updates a coachmark modal.
	 * @param {element} element The element that the checkmark modal will be highlighting.
	 */
	// TODO split into create modal and update modal functions
	const displayModal = (element) => {
		const targetLeft = element.offsetLeft;
		const targetTop = element.offsetTop;
		const targetWidth = element.offsetWidth;
		const targetHeight = element.offsetHeight;
		const highlightStyle = `
				position: absolute;
				left: ${targetLeft};
				top: ${targetTop};
				width: ${targetWidth};
				height: ${targetHeight};
				background: tomato;
				opacity: 0.5;
				transition:
					width ${ANIMATION_SPEED},
					height ${ANIMATION_SPEED},
					left ${ANIMATION_SPEED},
					top ${ANIMATION_SPEED};
			`;
		const infoBoxPosition = calculateInfoBoxPosition(
			targetLeft,
			targetTop,
			targetWidth,
			targetHeight
		);
		const infoBoxStyle = `
				position: absolute;
				left: ${infoBoxPosition.left};
				top: ${infoBoxPosition.top};
				borderRadius: 5px;
				width: 200px;
				background: white;
				transition: left ${ANIMATION_SPEED}, top ${ANIMATION_SPEED};
				border: solid 1px lightgrey;
				padding: 5px;
			`
		const highlightElement = getOrCreateElementById(HIGHLIGHT_ELEMENT_ID);
		const infoBoxElement = getOrCreateElementById(INFOBOX_ELEMENT_ID);
		const infoBoxHeaderElement = getOrCreateElementById(INFOBOX_HEADER_ELEMENT_ID, 'h3');
		const infoBoxDescriptionElement = getOrCreateElementById(INFOBOX_DESCRIPTION_ELEMENT_ID);
		const infoBoxNextElement = getOrCreateElementById(INFOBOX_NEXT_ELEMENT_ID, 'button');
		const infoBoxPreviousElement = getOrCreateElementById(
			INFOBOX_DESCRIPTION_ELEMENT_ID,
			'button'
		);
		const highlightElementParent = highlightElement.parentElement;

		if (!highlightElementParent) {
			// the modal elements havent been added to the dom yet so make sure that they are added
			document.body.insertAdjacentElement('beforeend', highlightElement);
			document.body.insertAdjacentElement('beforeend', infoBoxElement);
			infoBoxElement.insertAdjacentElement('beforeend', infoBoxHeaderElement);
			infoBoxElement.insertAdjacentElement('beforeend', infoBoxDescriptionElement);
			infoBoxElement.insertAdjacentElement('beforeend', infoBoxPreviousElement);
			infoBoxElement.insertAdjacentElement('beforeend', infoBoxNextElement);
			highlightElement.id = HIGHLIGHT_ELEMENT_ID;
			infoBoxElement.id = INFOBOX_ELEMENT_ID;
			infoBoxHeaderElement.id = INFOBOX_HEADER_ELEMENT_ID;
			infoBoxDescriptionElement.id = INFOBOX_DESCRIPTION_ELEMENT_ID;
			infoBoxPreviousElement.id = INFOBOX_PREVIOUS_ELEMENT_ID;
			infoBoxNextElement.id = INFOBOX_NEXT_ELEMENT_ID;
			infoBoxPreviousElement.innerText = 'Previous';
			infoBoxNextElement.innerText = 'Next';
			infoBoxPreviousElement.onclick = () => { displayPrevious() };
			infoBoxNextElement.onclick = () => { displayNext() };
		}
		highlightElement.style = highlightStyle;
		infoBoxElement.style = infoBoxStyle;
		infoBoxHeaderElement.innerText = checkmarkConfig[currentCheckmark].title;
		infoBoxDescriptionElement.innerText = checkmarkConfig[currentCheckmark].description;
	};

	const hideModal = () => {
		document.getElementById(HIGHLIGHT_ELEMENT_ID).remove();
	};

	const displayNext = () => {
		currentCheckmark = (currentCheckmark + 1) % checkmarkElements.length;
		displayModal(checkmarkElements[currentCheckmark]);
	}

	const displayPrevious = () => {
		currentCheckmark = (currentCheckmark - 1) % checkmarkElements.length;
		currentCheckmark = currentCheckmark < 0 
			? currentCheckmark + checkmarkElements.length : currentCheckmark;
		displayModal(checkmarkElements[currentCheckmark]);
	}

	// TODO config needs to be passed in from somewhere else
	const checkmarkConfig = [
		{
			id: 'cm-1',
			title: 'This is a header!',Â 
			description: 'It has big text.  Read it.',
		},
		{
			id: 'cm-2',
			title: 'This is a button!!!!',
			description: 'Click on it.  It doesn\'t do anything',
		},
		{
			id: 'cm-3',
			title: 'Is that an input field?',
			description: 'Yes it is.  Type stuff in it.',
		},
		{
			id: 'cm-4',
			title: 'This is also a button.',
			description: 'You know you want to click on it.',
		},
		{
			id: 'cm-5',
			title: 'This button is positioned absolutely.',
			description: 'This button is really magnificent.',
		}
	];

	let currentCheckmark = 0;

	const checkmarkElements = getCheckmarkElementsFromId(checkmarkConfig);

	displayModal(checkmarkElements[currentCheckmark]);

	window.addEventListener('resize', () => {
		displayModal(checkmarkElements[currentCheckmark]);
	})

	return {
		hideModal,
		displayModal,
		displayNext,
		displayPrevious,
	}
}

document.addEventListener('DOMContentLoaded', () => {
	window.tour_guide = app();
});